---
title: "Lab 6 | Advanced Visualization Tools & Customization"
subtitle: "ST 437 Data Visualization"
author: 
  - Erin Howard
  - Brian Cervantes Alvarez
date: today
date-format: long
format: 
    OSUstyle-html:
        toc: true
        toc-location: right
        toc-depth: 5
execute: 
  echo: true
  warning: false
webr:
  packages: ['ggplot2', 'dplyr', 'sf', 'leaflet', 'readr', 'rnaturalearth', 'rnaturalearthdata'] # Install R packages on document open
  show-startup-message: false    # Disable displaying status of webR initialization
filters:
- webr
---

## Learning Objectives

Pending

### Overview

Spatial visualization is crucial for analyzing geographic data, allowing for the representation of information on maps. This lab will guide you through creating static, interactive, and publication-ready maps using R.

## Example 1 | Static Map with `ggplot2` and `sf`

### Introduction

Static maps are powerful tools for presenting spatial data in a clear and concise manner. In this example, we’ll visualize global population data using the World Bank’s World Development Indicators dataset.


### Step 0 | Load correct libraries
```{r}
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
library(leaflet)
library(rnaturalearth)
```

### Step 1 | Load and Explore Spatial Data

We’ll start by loading the World Development Indicators dataset, focusing on population data, and then join it with a spatial dataset containing country boundaries.

```{r}
#| eval: false
# Load world boundaries shapefile (global country boundaries)
world <- ne_countries(scale = "medium", returnclass = "sf")
head(world, 5)

# Specify the data URL using HTTPS
url <- "https://raw.githubusercontent.com/datasets/population/master/data/population.csv"

cat("Downloading the data ...\n")
download.file(url, "population.csv")
cat("Dataset saved as 'population.csv'.\n")

# Read the population data into R
pop_data <- read_csv("population.csv", show_col_types = FALSE)
head(pop_data, 5)

```

### Step 2 | Combine `population.csv` and `world`

```{r}
#| eval: false
# Filter for the most recent year available
pop_recent <- pop_data %>%
  filter(Year == max(Year))

# Check the structure of both datasets
glimpse(pop_recent)

# Join the population data with the world boundaries using country codes
world_pop <- world %>%
  left_join(pop_recent, by = c("iso_a3" = "Country Code"))

# Save the cleaned and joined dataset
saveRDS(world_pop, "world_population_data.rds")
cat("Dataset saved as 'world_population_data.rds'.\n")

# Load the saved RDS file
world_pop <- readRDS("world_population_data.rds")

# Display the structure of the dataset
str(world_pop)
head(world_pop,5)
```

### INSTRUCTOR ONLY 
(THIS VERISON ALREADY HAS THE CLEANED UP RDS FILE, DOWNLOAD FROM REPO TO CONTINUE LAB)

```{webr-r}
# Specify the data URL using HTTPS
url <- "https://howarder.github.io/ST_437_Data_Viz/Datasets/world_population_data.rds"

cat("Downloading the data...'.\n")
download.file(url, "world_pop.rds")
cat("Dataset saved as 'world_population_data.rds'.\n")

# Load the cleaned and joined dataset
world_pop <- readRDS("world_pop.rds")
```

### Step 3 | Basic Map Plotting

Let’s create a static map showing the population distribution across the world.

```{webr-r}
# Create a basic population map
ggplot(data = world_pop) +
  geom_sf(aes(fill = Value), color = "black") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(
    title = "Global Population Distribution",
    fill = "Population",
    caption = "Data Source: World Bank and Natural Earth"
  ) +
  theme_minimal()
```

### Step 4 | Adding Layers and Customization

We can further enhance the map by customizing the color scale, adding labels, and modifying the theme.

```{webr-r}
# Enhance the population map with customizations
ggplot(data = world_pop) +
  geom_sf(aes(fill = Value), color = "black") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(
    title = "Enhanced Global Population Distribution",
    fill = "Population",
    caption = "Data Source: World Bank and Natural Earth"
  ) +
  theme(
    panel.background = element_rect(fill = "lightblue"),
    panel.grid.major = element_line(color = "white"),
    text = element_text(family = "Georgia"),
    plot.title = element_text(size = 14, face = "bold")
  )
```

## Example 2: Interactive Map with `leaflet`

### Introduction

Interactive maps allow users to explore spatial data dynamically, making them valuable for presentations and web applications. We’ll use the `leaflet` package to create an interactive map.

### Step 1: Basic Interactive Map

We’ll create an interactive map with markers for specific locations.

```{r}
# Load the leaflet library
library(leaflet)

# Create a basic interactive map
m <- leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap tiles
  addMarkers(lng = c(-122.4194, -74.0060), lat = c(37.7749, 40.7128),
             popup = c("San Francisco", "New York"))

# Print the map
m
```

### Step 2: Adding Multiple Layers and Features

Let’s add more layers and customize the map further.

```{r}
#| eval: false
# Download the shapefile (if not already done)
url <- "https://www.weather.gov/source/gis/Shapefiles/County/s_10se24.zip"
download.file(url, "state_boundaries.zip")
unzip("state_boundaries.zip", exdir = "state_boundaries")

# Load the shapefile
shapes <- st_read("state_boundaries/s_10se24.shp")

# Transform the projection to WGS84
shapes <- shapes %>%
  sf::st_transform('+proj=longlat +datum=WGS84')

# Create example data (replace with your actual data if available)
usa <- data.frame(
  NAME = shapes$NAME,  # Use the NAME column for merging
  RATE = runif(n = nrow(shapes), min = 1, max = 10)  # Example random data
)

# Merge the shapefile with your data using the NAME column
usaMap <- merge(shapes, usa, by = "NAME")
```
```{r}
#| eval: false
# Save the final merged data as an RDS file
saveRDS(usaMap, "usa_map_sf.rds")
cat("Final merged shapefile saved as 'final_merged_shapefile.rds'.\n")
```

### INSTRUCTOR VERISON
```{r}
# Load the saved RDS file
url <- "https://howarder.github.io/ST_437_Data_Viz/Datasets/usa_map_sf.rds"
cat("Downloading the data...'.\n")
download.file(url, "usa_map_sf.rds.rds")
cat("Dataset saved as 'usa_map_sf.rds.rds'.\n")

# Load the cleaned and joined dataset
usaMap <- readRDS("world_pop.rds")

# Define color palette based on RATE
pal <- colorBin("Reds", domain = usaMap$RATE, bins = 3)

# Create the Leaflet map
map <- leaflet() %>%
  setView(lng = -98.5795, lat = 39.8282, zoom = 4) %>%  # Center of US
  addPolygons(
    data = usaMap,
    label = ~paste0(NAME, ", Rate: ", round(RATE, 2)),
    fillColor = ~pal(RATE),
    fillOpacity = 0.7,
    color = "black",
    weight = 1
  )

# Display the map
map
```

### Summary

Interactive maps with `leaflet` are ideal for web-based presentations, 


