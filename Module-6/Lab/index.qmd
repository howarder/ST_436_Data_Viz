---
title: "Lab 6 | Advanced Visualization Tools & Customization"  
subtitle: "ST 437 Data Visualization"  
author:  
  - Erin Howard  
  - Brian Cervantes Alvarez  
date: today  
date-format: long  
format:  
    OSUstyle-html:  
        toc: true  
        toc-location: right  
        toc-depth: 5  
execute:  
  echo: true  
  warning: false  
webr:  
  packages: ['ggplot2', 'dplyr', 'sf', 'leaflet', 'readr', 'rnaturalearth', 'rnaturalearthdata', 'magrittr']  
  show-startup-message: false  
filters:  
- webr  
---

## Learning Objectives

- Understand the basics of spatial data and how to work with it in R.
- Learn how to create static and interactive maps.
- Customize maps for better visualization.

### Overview

Mapping geographic data helps us see patterns and trends in a way that's easy to understand. This lab will show you how to create different types of maps using R.

## Example 1 | Static Map with `ggplot2` and `sf`

### Introduction

Static maps are great for presenting information clearly in reports or presentations. In this example, we’ll create a map that shows the global population using data from the World Bank.

### Step 0 | Load the Necessary Libraries

First, let's load the libraries we need.

```{r}
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
library(leaflet)
library(rnaturalearth)
library(rnaturalearthdata)
```

### Step 1 | Load and Explore Spatial Data

We start by loading the global country boundaries and population data.

```{webr-r}
# Load the world map with country boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")

# Check the first few rows to understand the structure
head(world, 5)

# Download the population data
url <- "https://raw.githubusercontent.com/datasets/population/master/data/population.csv"
download.file(url, "population.csv")

# Load the population data into R
pop_data <- read_csv("population.csv", show_col_types = FALSE)

# Check the first few rows of population data
head(pop_data, 5)
```

- **`ne_countries()`**: Loads a map of the world with country borders.
- **`download.file()` and `read_csv()`**: Downloads and reads the population data.

### Step 2 | Combine `population.csv` and `world`

Now, we'll merge the population data with the world map based on the country codes.

```{webr-r}
# Filter for the most recent year available
pop_recent <- pop_data %>%
  filter(Year == max(Year))

# Merge population data with the world map using country codes
world_pop <- world %>%
  left_join(pop_recent, by = c("iso_a3" = "Country Code"))

# Save the merged dataset for future use
saveRDS(world_pop, "world_population_data.rds")

# Load the merged dataset (if not already loaded)
world_pop <- readRDS("world_population_data.rds")

# Check the structure of the merged data
str(world_pop)

# Preview the first few rows
head(world_pop, 5)
```

- **`left_join()`**: Combines the world map with population data so that each country has its population data attached.
- **`saveRDS()`**: Saves the merged dataset so we don't have to redo this step in the future.

### Step 3 | Basic Map Plotting

Let's create a simple map to visualize the population distribution across countries.

```{webr-r}
# Create a basic population map
ggplot(data = world_pop) +
  geom_sf(aes(fill = Value), color = "black") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(
    title = "Global Population Distribution",
    fill = "Population",
    caption = "Data Source: World Bank and Natural Earth"
  ) +
  theme_minimal()
```

- **`geom_sf()`**: Plots the map, coloring each country based on its population.
- **`scale_fill_viridis_c()`**: Adds a color scale to represent population values.

### Step 4 | Adding Layers and Customization

We can enhance the map by customizing its appearance.

```{webr-r}
# Customize the population map
ggplot(data = world_pop) +
  geom_sf(aes(fill = Value), color = "black") +
  scale_fill_viridis_c(option = "plasma", na.value = "lightgray") +
  labs(
    title = "Enhanced Global Population Distribution",
    fill = "Population",
    caption = "Data Source: World Bank and Natural Earth"
  ) +
  theme(
    panel.background = element_rect(fill = "lightblue"),
    panel.grid.major = element_line(color = "white"),
    text = element_text(family = "Georgia"),
    plot.title = element_text(size = 14, face = "bold")
  )
```

- **`theme()`**: Customizes the look of the map by changing the background, grid lines, and text.

## Example 2 | Interactive Map with `leaflet`

### Introduction

Interactive maps let users explore data by zooming, panning, and clicking on different areas. We’ll use the `leaflet` package to make a map that you can interact with.

### Step 1: Basic Interactive Map

We'll start with a simple interactive map.

```{r}
# Create a basic interactive map
m <- leaflet() %>%
  addTiles() %>%  # Add default map tiles
  addMarkers(lng = c(-122.4194, -74.0060), lat = c(37.7749, 40.7128),
             popup = c("San Francisco", "New York"))

# Display the map
m
```

- **`leaflet()`**: Initializes a new interactive map.
- **`addTiles()`**: Adds a base map layer.
- **`addMarkers()`**: Places markers on the map for specific locations.

### Step 2: Adding Multiple Layers and Features

Next, we’ll add state boundaries to the map.

```{r}
#| eval: false
# Download the shapefile with state boundaries
url <- "https://www.weather.gov/source/gis/Shapefiles/County/s_10se24.zip"
download.file(url, "state_boundaries.zip")
unzip("state_boundaries.zip", exdir = "state_boundaries")

# Load the shapefile
shapes <- st_read("state_boundaries/s_10se24.shp")

# Transform the map projection to WGS84
shapes <- shapes %>%
  sf::st_transform('+proj=longlat +datum=WGS84')

# Create example data to merge with the shapes
usa <- data.frame(
  NAME = shapes$NAME,  # State names
  RATE = runif(n = nrow(shapes), min = 1, max = 10)  # Example data
)

# Merge the shapefile with your data
usaMap <- merge(shapes, usa, by = "NAME")

# Save the final merged data as an RDS file
saveRDS(usaMap, "usa_map_sf.rds")
```

- **`unzip()`**: Extracts the shapefile contents.
- **`st_transform()`**: Changes the map's projection to match the Leaflet format.
- **`merge()`**: Combines the shapefile with our example data.

### Step 3: Creating the Leaflet USA Map

Finally, we’ll create the interactive map using the prepared data.

```{r}
# Download the cleaned and joined dataset
url <- "https://howarder.github.io/ST_437_Data_Viz/Datasets/usa_map_sf.rds"
download.file(url, "usa_map_sf.rds")

# Load the dataset
usaMap <- readRDS("usa_map_sf.rds")

# Define color palette based on RATE
pal <- colorBin("Reds", domain = usaMap$RATE, bins = 3)

# Create the Leaflet map
map <- leaflet() %>%
  setView(lng = -98.5795, lat = 39.8282, zoom = 4) %>%  # Center of US
  addPolygons(
    data = usaMap,
    label = ~paste0(NAME, ", Rate: ", round(RATE, 2)),
    fillColor = ~pal(RATE),
    fillOpacity = 0.7,
    color = "black",
    weight = 1
  )

# Display the map
map
```

- **`setView()`**: Centers the map on the US.
- **`addPolygons()`**: Adds state boundaries to the map, color-coded by the `RATE` values.

### Summary

Interactive maps with `leaflet` are powerful tools for exploring spatial data. They allow users to engage with data dynamically, making presentations and web applications more interactive and informative.