---
title: "Lab 1 | Introduction to Data Visualization"
subtitle: "ST 437 Data Visualization"
author: 
  - Erin Howard
  - Brian Cervantes Alvarez
date: today
date-format: long
format: 
    OSUstyle-html:
        toc: true
        toc-location: right
        toc-depth: 5
execute: 
  echo: true
  warning: false
revealjs-plugins:
  - codewindow
webr:
  packages: ['lubridate', 'ggplot2', 'readr', 'dplyr', 'lubridate', 'tidyr'] # Install R packages on document open
  show-startup-message: false    # Disable displaying status of webR initialization
filters:
- webr
---

## Learning Objectives

1.  **LO**: description

## What is a Quarto document?

This is a quarto document! A quarto document (.qmd) is a special kind of file that combines code and plain text to produce polished, shareable reports and presentations. In this class we'll use Quarto documents to record our work.

There are three main components to Quarto document:

1.  The YAML header
2.  Code blocks
3.  Markdown text

### The YAML Header
Every Quarto document begins with the YAML header that appears inside three dashes `---`. The header controls document level settings, such as the document type, the title, and the author. 

### Code Blocks
We can write, store, and run code entirely within a Quarto document. Code blocks start and end with three back ticks ` ``` `. After the first set of back ticks, we indicate that we're using R code by specifying `{r}`. If we don't included `{r}` at the start of the code block, Quarto won't recognize the content as code. See the two examples below. 

```
# Not executable code
3+4
```

```{r}
# Executable code
3+4
```

## Markdown text
Anything else in the document outside of YAML header and the code blocks is interpreted as Markdown - a syntax for controlling the text of the document. 

For example, to indicate a header, use `#`. To indicate a subheader, use `##`, and so on. 

For help with Markdown syntax, check out <https://quarto.org/docs/authoring/markdown-basics.html>.





[**Brian**]{.text-purple} *Can we make this look like the preview window on the second slide of https://mine-cetinkaya-rundel.github.io/quarto-world-of-possibilities-jsm24/talks/1-presentations/ ?*

<!-- :::: {.codewindow .quarto} -->
<!-- index.qmd -->

<!-- ``` md -->
<!-- {{< include includes/basics.qmd >}} -->
<!-- ``` -->
<!-- ::: -->




## Installing R-packages

In this lab, we'll rely on a few functions that aren't a part of Base R. Instead, they are dependent on a package - a collection of code, data, and documentation typically used to run more advanced functions. Here, we'll need the`ggplot2` package.  

You may have received a warning at the start of your .qmd file that says `Package ggplot2 is required but is not installed.` If you see this warning, you can easily install the package by clicking the `Install` option. You can also install packages using `install.packages('Name of Package')`. Careful! Package names are case sensitive, so install.packages('GGplot2') will not work, but `install.packages('ggplot2')` will. 


::: callout-important
## Loading Packages
Once you have installed a package, you won't need to install it again. You will; however, need to load any necessary packages with each new iteration of RStudio. The code chunk below loads the `ggplot2` package for us.
:::


```{r}
library(ggplot2)
```

## Running Code from a Quarto file

The .qmd file is simply a static document. If we want to actually run code from the document, we need to send the code from the .qmd code block to the RStudio console. 

::: {.callout-tip}
## Running Code Block Shortcuts

`Mac users`: Use ⌘ + return to run single or highlighted line(s). Use ⌘ + shift + return to run entire code block

`Windows users`: Use ctrl + enter to run single or highlighted line(s). Use ctrl + shift + enter to run entire code block
:::

```{r}
# This code block stores the values
# 10 in x and 15 in y.
# Try running this code! 
x <- 10
y <- 15
```

